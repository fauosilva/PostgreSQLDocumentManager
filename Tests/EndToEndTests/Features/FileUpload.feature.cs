// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EndToEndTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FileUploadFeature : object, Xunit.IClassFixture<FileUploadFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FileUpload.feature"
#line hidden
        
        public FileUploadFeature(FileUploadFeature.FixtureData fixtureData, EndToEndTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FileUpload", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User should be able to download file after being set download permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "FileUpload")]
        [Xunit.TraitAttribute("Description", "User should be able to download file after being set download permissions")]
        [Xunit.TraitAttribute("Category", "Cleanup")]
        public virtual void UserShouldBeAbleToDownloadFileAfterBeingSetDownloadPermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "Cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should be able to download file after being set download permissions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "userName",
                            "userPassword",
                            "role"});
                table1.AddRow(new string[] {
                            "testUser",
                            "testUserPassword",
                            "User"});
#line 5
 testRunner.And("an user with role was created", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "userName",
                            "userPassword"});
                table2.AddRow(new string[] {
                            "testUser",
                            "testUserPassword"});
#line 8
 testRunner.And("a JWT token was generated for the created user with their credentials", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "fileName",
                            "name",
                            "description",
                            "category",
                            "mimeType"});
                table3.AddRow(new string[] {
                            "sample.png",
                            "sample",
                            "testSampleDescription",
                            "sampleCategory",
                            "image/png"});
#line 11
 testRunner.And("a file was uploaded by the Admin user", ((string)(null)), table3, "And ");
#line hidden
#line 14
 testRunner.And("the created user was given direct access to the uploaded file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.When("the created user attempts to download the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "fileName",
                            "mimeType"});
                table4.AddRow(new string[] {
                            "sample.png",
                            "image/png"});
#line 16
 testRunner.Then("the created user should be able to download the file", ((string)(null)), table4, "Then ");
#line hidden
#line 19
 testRunner.And("the created user should exist on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the created user should have access granted to the file on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User should be able to download file after being set download permissions through" +
            " a group")]
        [Xunit.TraitAttribute("FeatureTitle", "FileUpload")]
        [Xunit.TraitAttribute("Description", "User should be able to download file after being set download permissions through" +
            " a group")]
        [Xunit.TraitAttribute("Category", "Cleanup")]
        public virtual void UserShouldBeAbleToDownloadFileAfterBeingSetDownloadPermissionsThroughAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "Cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User should be able to download file after being set download permissions through" +
                    " a group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "userName",
                            "userPassword",
                            "role"});
                table5.AddRow(new string[] {
                            "testUser1",
                            "testUserPassword",
                            "User"});
#line 25
 testRunner.And("an user with role was created", ((string)(null)), table5, "And ");
#line hidden
#line 28
 testRunner.And("and a group with name \'sample\' was created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "groupName",
                            "userName"});
                table6.AddRow(new string[] {
                            "sample",
                            "testAdmin"});
#line 29
 testRunner.And("the created user was assigned to the created group", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "userName",
                            "userPassword"});
                table7.AddRow(new string[] {
                            "testUser1",
                            "testUserPassword"});
#line 32
 testRunner.And("a JWT token was generated for the created user with their credentials", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "fileName",
                            "name",
                            "description",
                            "category",
                            "mimeType"});
                table8.AddRow(new string[] {
                            "sample2.png",
                            "sample2",
                            "testSampleDescription",
                            "sampleCategory",
                            "image/png"});
#line 35
 testRunner.And("a file was uploaded by the Admin user", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "fileName",
                            "groupName"});
                table9.AddRow(new string[] {
                            "sample2.png",
                            "sample"});
#line 38
 testRunner.And("the created group was given access to the file", ((string)(null)), table9, "And ");
#line hidden
#line 41
 testRunner.When("the created user attempts to download the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "fileName",
                            "mimeType"});
                table10.AddRow(new string[] {
                            "sample2.png",
                            "image/png"});
#line 42
 testRunner.Then("the created user should be able to download the file", ((string)(null)), table10, "Then ");
#line hidden
#line 45
 testRunner.And("the created user should exist on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the created group should exist on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("the user should be associated with the group on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("the created group should have access granted to the file on the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FileUploadFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FileUploadFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
